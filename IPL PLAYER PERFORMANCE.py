# -*- coding: utf-8 -*-
"""syadavsir.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qW90T1dXYysTxoczm5j0mmiAn3G96nrM
"""

from google.colab import drive
drive.mount('/gdrive')

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.model_selection import cross_validate
from sklearn import linear_model




delivery_data=pd.read_csv("/gdrive/My Drive/deliveries.csv")
match_data=pd.read_csv("/gdrive/My Drive/matches.csv")

delivery_data.head()
match_data.head()

player_team="Royal Challengers Bangalore"
name='V Kohli'
batsman_data=delivery_data[delivery_data.batsman==name]
teams=pd.DataFrame(index=match_data.team1.unique())
teams=teams.drop('Royal Challengers Bangalore')
teams

data=match_data[match_data.team1==player_team]
batting_first=list()
for team in teams.index:
    for venue in data.venue.unique():
        matches=data[(data.venue==venue)&(data.team2==team)].id
        runs=0
        balls=0
        for match in matches:
            t=batsman_data[batsman_data.match_id==match].batsman_runs.sum()
            runs=runs+t
            balls=balls+len(batsman_data[(batsman_data.match_id==match)&(batsman_data.wide_runs==0)&(batsman_data.noball_runs==0)])
        batting_first=batting_first+[[team,venue,1,balls,runs]]
data=match_data[match_data.team2==player_team]
batting_second=list()
for team in teams.index:
    for venue in data.venue.unique():
        matches=data[(data.venue==venue)&(data.team1==team)].id
        runs=0
        balls=0
        for match in matches:
            t=batsman_data[batsman_data.match_id==match].batsman_runs.sum()
            runs=runs+t
            balls=balls+len(batsman_data[(batsman_data.match_id==match)&(batsman_data.wide_runs==0)&(batsman_data.noball_runs==0)])
        batting_second=batting_second+[[team,venue,0,balls,runs]]
    batting_first=batting_first+batting_second
df=pd.DataFrame(data=batting_first,columns=['team','venue','batting_first','balls','runs'])

df=df[df.runs!=0]
df.head()

fig = plt.figure(figsize=(16,8))  
fig.add_subplot(221)
df.groupby('team').runs.sum().plot(kind='bar',title='runs scored against each team')

fig = plt.figure(figsize=(16,8))  
ax=fig.add_subplot(221)
df.groupby('venue').runs.sum().plot(kind='bar',title='runs scored at each venue')

fig = plt.figure(figsize=(16,8))  
fig.add_subplot(221)

df.groupby('batting_first').runs.sum().plot(kind='bar',title='batting_first vs batting_second')
plt.xticks(rotation=0)

from sklearn.model_selection import train_test_split
processed_df = df.copy()
le = preprocessing.LabelEncoder()
processed_df.team = le.fit_transform(processed_df.team)
processed_df.venue = le.fit_transform(processed_df.venue)

X = processed_df.drop(['runs'], axis=1).values
y = processed_df['runs'].values
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)

from keras.models import Sequential
from keras.layers import Dense
n_cols = X_train.shape[1]

model_mc = Sequential()


model_mc.add(Dense(200, activation='relu', input_shape=(n_cols,)))
model_mc.add(Dense(200, activation='relu'))
model_mc.add(Dense(200, activation='relu'))
model_mc.add(Dense(1))
model_mc.compile(optimizer='adam', loss='mean_squared_error')



model_mc.fit(X_train, y_train, validation_split=0.2, epochs=30)

y_1= model_mc.predict(X_test)
print(metrics.mean_squared_error(y_test,y_1))



